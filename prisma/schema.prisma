datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Workspace {
  id         Int         @id @default(autoincrement())
  members    Member[]
  users      User[]
  operations Operation[]
}

model Member {
  id                 Int         @id @default(autoincrement())
  name               String
  workspaceId        Int
  creditedOperations Operation[] @relation("OperationCreditor")
  duedOperations     Operation[] @relation("OperationDebtor")
  salaries           Salary[]
  workspace          Workspace   @relation(fields: [workspaceId], references: [id])
  user               User?       @relation(fields: [userId], references: [id])
  userId             String?     @unique
}

model Operation {
  id          Int                   @id @default(autoincrement())
  type        String
  name        String
  amount      Float
  description String?
  date        DateTime
  creditorId  Int
  workspaceId Int
  creditor    Member                @relation("OperationCreditor", fields: [creditorId], references: [id])
  workspace   Workspace             @relation(fields: [workspaceId], references: [id])
  debtors     Member[]              @relation("OperationDebtor")
  attachments OperationAttachment[]
}

model OperationAttachment {
  id          Int       @id @default(autoincrement())
  name        String
  data        Bytes
  operationId Int
  operation   Operation @relation(fields: [operationId], references: [id])
}

model Salary {
  id        Int      @id @default(autoincrement())
  memberId  Int
  startDate DateTime
  endDate   DateTime
  amount    Float
  member    Member   @relation(fields: [memberId], references: [id])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  member        Member?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId Int?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
